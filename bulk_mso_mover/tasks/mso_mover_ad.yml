---
# Update user details
- name: Update mover user with required informations
  block:
    - uri:
        url: "{{ user_uri }}/{{userid}}"
        method: PATCH
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ ms_online_access_token }}"
        body: |-
          {
            "accountEnabled": true,
            "city": "{{ user_packet.future_city }}",
            "country": "{{ user_packet.future_country }}",
            "department": "{{ user_packet.future_department_name }}",
            "jobTitle": "{{ user_packet.future_job_title }}",
            "officeLocation": "{{ user_packet.future_office_location }}",
            "preferredLanguage": "en-US"
          }
        body_format: json
        validate_certs: false
        status_code: 204
      register: user
    - set_fact : 
        user_transfer_result: "Successful"
  when: ritm_details.req_transfer_user is defined and userid != ""
  rescue:
    - set_fact : 
        user_transfer_result: "Error"
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ user }}"
        task_name: Update mover user with required informations
        is_all_task_success: "No"

# Update Manager Email
- name: "Update new manager to the user {{ user_packet.mover_name }}"
  block:
    - uri:
        url: "{{ ms_graph_uri }}/v1.0/users/{{ userid }}/manager/$ref"
        method: PUT
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ ms_online_access_token }}"
        body: |-
          {
            "@odata.id": "{{ user_uri }}/{{user_packet.future_manager_email}}"
          }
        body_format: json
        validate_certs: false
        status_code: 204
      register: update_manager
    - set_fact : 
        user_manager_result: "Successful"
  when: ritm_details.req_transfer_user is defined and userid != ""
  rescue:
    - set_fact : 
        user_manager_result: "Error"
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ update_manager }}"
        task_name: Update manager for the user {{ user_packet.mover_name }}
        is_all_task_success: "No"

- set_fact:
        user_sequence_count: "{{user_sequence + 1}}"

- set_fact:
      user_transfer_result: "No user exists with employee ID"
  when: userid == ""

- set_fact:
      userName: "{{user_employee_id}}"
  when: userid == ""

- set_fact:
       user_transfer_result_worknotes: "{{user_transfer_result_worknotes}}\n{{user_sequence_count}}.{{user_transfer_result}}:{{userName}}"
     
- set_fact:
        user_transfer_req_status: "{% if user_transfer_result_worknotes.find('Error') != -1 %}{{ Failed_state }}{% else %}{{ State }}{% endif %}"
  when: last_iteration_count

- set_fact:
      bulk_mail_worklog: "{{bulk_mail_worklog}}\n{{user_sequence_count}}. {{user_transfer_result}} : {{userName}}"

- set_fact:
    bulk_mail_worklog: "{{ bulk_mail_worklog | regex_replace('^,', '') }}"

# Updating "req_transfer_user" RITM
- name: Update RITM for "req_transfer_user"
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_transfer_user is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_transfer_user }}"
    work_notes_status_msg: "{{ user_transfer_result_worknotes }}"
    Status: "{{ user_transfer_req_status }}"

# Updating Software Groups and DL
- name: Get the current groups the user belongs to.
  block:
    - uri:
        url: "{{ user_uri }}/{{ userid }}/memberOf/microsoft.graph.group?$select=displayName,id"
        method: GET
        return_content: yes
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Authorization: "Bearer {{ ms_online_access_token }}"
        validate_certs: false
        status_code: 200
      register: get_group_memberOf_details
  when: ritm_details.req_software is defined and userid != ""
  rescue:
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ get_group_memberOf_details }}"
        task_name: Get Current Group ids
        statusMsg: "Failure while fetching Current Groups for User {{ UserName }}"
        is_all_task_success: "No"

        #Initialising Variables        
- set_fact:
    mover_group_names: ""

- set_fact:
    group_name_add_snow: ""

- set_fact:
    new_list: ""

- set_fact:
    group_name_update_snow: ""

    #- set_fact:
    #group_ids_to_delete: ""

- set_fact:
    current_groups: "{{ get_group_memberOf_details.json.value }}"
  when: userid != ""

- set_fact:
     new_list: "{{new_list}},{{item.id}}"
  loop: "{{ current_groups }}"
  when: userid != ""

- set_fact:
    new_group_ids: "{{ new_list | regex_replace('^,', '') | trim }}"
  when: userid != ""

- set_fact:
    new_group_ids: "{{ new_group_ids.split(',') | list}}"
  when: userid != ""

- set_fact:
    group_ids_to_delete: "{{ new_group_ids | reject('match',default_group_id)| list}}"
  when: default_group_id is defined and userid != ""

- set_fact:
     mover_group_names: "{{ mover_group_names }},{{item.displayName}}"
  loop: "{{ current_groups }}"
  when: userid != ""

- set_fact:
     mover_group_names: "{{ mover_group_names | regex_replace('^,', '') | trim }}"
  when: userid != ""

- set_fact:
     mover_group_names: "{{ mover_group_names.split(',') | list}}"
  when: userid != ""

- set_fact:
    group_name_update_snow: "{{ mover_group_names | reject('match',user_packet.default_group)| list}}"
  when: userid != ""

# Added to get the Added Group Names
- set_fact: 
     add_group_names: "{{ distribution_list }}"
  when: userid != ""
  
- set_fact:
     add_group_names: "{{ add_group_names }},{{item.software_group}}"
  loop: "{{ user_packet.software_groups }}"
  when: userid != ""

- set_fact:
     add_group_names: "{{ add_group_names | regex_replace('^,', '') | trim }}"
  when: userid != ""

- set_fact:
     add_group_names: "{{ add_group_names.split(',') | list}}"
  when: userid != ""

- set_fact:
    group_name_add_snow: "{{ add_group_names | reject('match',user_packet.default_group)| list}}"
  when: userid != ""

# Removing users from Groups  
- name: Delete from groups the user belongs to.
  block:
    - uri:
        url: "{{ groups_uri}}/{{ item | trim }}/members/{{ userid }}/$ref"
        method: DELETE
        return_content: yes
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Authorization: "Bearer {{ ms_online_access_token }}"
        validate_certs: false
        status_code: 204
      register: get_group_memberOf
      loop: "{{  group_ids_to_delete }}"
    - set_fact:
          remove_group_result: "Successful"
  when: ritm_details.req_software is defined and userid != ""
  rescue:
    - set_fact:
          remove_group_result: "Error"
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ get_group_memberOf }}"
        task_name: Delete Group ids
        is_all_task_success: "No"
        statusMsg: "Failure while Removing Group for User {{ UserName }}"
        status: "{{ Failed_state }}"

- name: Add member to software group
  block:
    - uri:
        url: "{{ ms_graph_uri }}/v1.0/groups/{{item}}/members/$ref"
        method: POST
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ ms_online_access_token }}"
        body: |-
          {
            "@odata.id": "{{ user_uri }}/{{userid}}"
          }
        body_format: json
        validate_certs: false
        status_code: 204
      register: add_groupmembership
      loop: "{{ group_id_list}}"
    - set_fact:
          add_group_result: "Successful"
  when: (ritm_details.req_software is defined or ritm_details.req_distribution_list is defined) and userid != ""
  rescue:
    - set_fact:
          add_group_result: "Error"
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ add_groupmembership }}"
        task_name: Add member to software group
        is_all_task_success: "No"
        statusMsg: "Failure while adding member to software/DL groups"
        status: "{{ Failed_state }}"

- set_fact:
    add_group_result: "Skipped"
  when: userid == ""

- set_fact:
    group_name_update_snow: "Skipped"
  when: userid == ""

- set_fact:
    group_name_add_snow: "Skipped"
  when: userid == ""

- set_fact:
       dl_software_folder_worknotes: "{{dl_software_folder_worknotes}}\n{{user_sequence_count}}. {{userName}}, Groups Removed: {{group_name_update_snow}}, Added to software groups: {{group_name_add_snow}} "

- set_fact:
        dl_software_folder_req_status: "{% if dl_software_folder_worknotes.find('Error') != -1 %}{{ Failed_state }}{% else %}{{ State }}{% endif %}"
  when: last_iteration_count

- set_fact:
      bulk_mail_worklog: "{{bulk_mail_worklog}}, Groups Removed: {{group_name_update_snow}}, Added to software groups: {{group_name_add_snow}}"

# Updating RITM for DL
- name: Update RITM for DL updation
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_distribution_list is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_distribution_list }}"
    work_notes_status_msg: "{{ dl_software_folder_worknotes }}"
    Status: "{{ dl_software_folder_req_status }}"

# Updating RITM for Software Groups
- name: Update RITM for updating user software groups
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_software is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_software }}"
    work_notes_status_msg: "{{ dl_software_folder_worknotes }}"
    Status: "{{ dl_software_folder_req_status }}"

# Updating RITM for Folder Access
- name: Update RITM for updating user Folder Access
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_folder_access is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_folder_access }}"
    work_notes_status_msg: "{{ dl_software_folder_worknotes }}"
    Status: "{{ dl_software_folder_req_status }}"

- name: Add member to vpn
  block:
    - uri:
        url: "{{ ms_graph_uri }}/v1.0/groups/{{vpn_id}}/members/$ref"
        method: POST
        return_content: yes
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ ms_online_access_token }}"
        body: |-
          {
            "@odata.id": "{{ user_uri }}/{{userid}}"
          }
        body_format: json
        validate_certs: false
        status_code: 204
      register: add_vpnmembership
    - set_fact:
          add_vpn_result: "Successful"
  when: (ritm_details.req_software is defined or ritm_details.req_distribution_list is defined) and userid != ""
  rescue:
    - set_fact:
          add_vpn_result: "Error"
    - import_role:
        name: bulk_common_utilities
        tasks_from: logging
      vars:
        exception: "{{ add_vpnmembership }}"
        task_name: Add member to vpn
        is_all_task_success: "No"
        statusMsg: "Failure while adding member to vpn"
        status: "{{ Failed_state }}"

- set_fact:
    add_vpn_result: "skipped"
  when: userid == ""

- set_fact:
       vpn_add_worknotes: "{{vpn_add_worknotes}}\n{{user_sequence_count}}. {{userName}}, {{ add_vpn_result }} in adding to VPN: {{user_packet.vpn}} "

- set_fact:
        vpn_add_req_status: "{% if vpn_add_worknotes.find('Error') != -1 %}{{ Failed_state }}{% else %}{{ State }}{% endif %}"
  when: last_iteration_count

- set_fact:
      bulk_mail_worklog: "{{bulk_mail_worklog}}, {{ add_vpn_result }} in adding to VPN: {{user_packet.vpn}}"

# Updating RITM for VPN Access
- name: Update RITM for updating user VPN Access
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_vpn is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_vpn }}"
    work_notes_status_msg: "{{ vpn_add_worknotes }}"
    Status: "{{ vpn_add_req_status }}"


# Updating RITM for Hardware Access
- name: Update RITM for updating user hardware Access
  import_role:
    name: bulk_common_utilities
    tasks_from: ritm_status_update
  when: ritm_details.req_hardware_request is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ ritm_details.req_hardware_request }}"
    work_notes_status_msg: "Hardware Request Completed"
    Status: "{{ State }}"

- set_fact:
    req_status: "{% if user_transfer_result_worknotes.find('Error') != -1 or dl_software_folder_worknotes.find('Error') != -1 or vpn_add_worknotes.find('Error') != -1 or ticket_update_status_msgs.find('Error') != -1 %}{{ Failed_state }}{% else %}{{ State }}{% endif %}"
  when: last_iteration_count

- set_fact:
    req_worknotes: "{% if user_transfer_result_worknotes.find('Error') != -1 or dl_software_folder_worknotes.find('Error') != -1 or vpn_add_worknotes.find('Error') != -1 or ticket_update_status_msgs.find('Error') != -1 %}Users Moved Successfully{% else %}Unable to close REQ, Please check RITM's for more details{% endif %}"
  when: last_iteration_count

#Sending email to User and Current Manager
- name: Email to mover on successfull movement
  import_role:
    name: bulk_common_utilities
    tasks_from: send_mail_double_recipient
  vars:
    mail_content: "{{ bulk_mail_mover_user }}"
    to_email_address: "{{ user_packet.mover_email }}"
    cc_email_address1: "{{ manager_email }}"
  when: userid != ""  

# Updating REQ 
- name: Update SNOW req for Mover
  import_role:
    name: bulk_common_utilities
    tasks_from: snow_status_update
  when: req_no is defined and last_iteration_count
  vars:
    ritm_req_number: "{{ req_no }}"
    work_notes_status_msg: "{{ req_worknotes}}"
    Status: "{{ req_status }}"

#Sending email to Requester and Future Manager
- name: Email to mover on successfull movement
  import_role:
    name: bulk_common_utilities
    tasks_from: send_mail_double_recipient
  vars:
    mail_content: "{{ bulk_mail_mover_requestor }}"
    to_email_address: "{{ requestor_email }}"
    cc_email_address1: "{{ user_packet.future_manager_email }}"
  when: last_iteration_count

